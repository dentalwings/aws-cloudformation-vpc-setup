Description:
  This template deploys a VPC, with public and private subnets spread across all
  Availability Zones in the selected region. It deploys an Internet Gateway, with a default
  route on the public subnets. It deploys NAT Gateways (one in each AZ) and default routes
  for them in the private subnets.

Parameters:
  Tags:
    Description: A comma seperated list of key=value pairs
    Type: String
    Default: ''

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16

  CreateBastionHost:
    Description: Should we setup bastion hosts?
    Default: false
    Type: String
    AllowedValues: [true, false]

  BastionHostInstanceType:
    Description: InstanceType of Bastion Host (default t2.micro)
    Type: String
    Default: t2.micro
    AllowedValues: [t1.micro, t2.nano, t2.micro, t2.small, t2.medium, t2.large, m1.small,
      m1.medium, m1.large, m1.xlarge, m2.xlarge, m2.2xlarge, m2.4xlarge, m3.medium,
      m3.large, m3.xlarge, m3.2xlarge, m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge,
      m4.10xlarge, c1.medium, c1.xlarge, c3.large, c3.xlarge, c3.2xlarge, c3.4xlarge,
      c3.8xlarge, c4.large, c4.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge, g2.2xlarge,
      g2.8xlarge, r3.large, r3.xlarge, r3.2xlarge, r3.4xlarge, r3.8xlarge, i2.xlarge,
      i2.2xlarge, i2.4xlarge, i2.8xlarge, d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge,
      hi1.4xlarge, hs1.8xlarge, cr1.8xlarge, cc2.8xlarge, cg1.4xlarge]
    ConstraintDescription: must be a valid EC2 instance type.

  BastionHostAllowedIPRange:
    Description: Bastion Host allowed IP Range (CIDR notation). Required if "CreateBastionHost" = true!
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  BastionHostKeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the Bastion Host. Required if "CreateBastionHost" = true!
    #Type: AWS::EC2::KeyPair::KeyName # disabled since
    Type: String
    Default: None
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

# ToDo: move this mapping to a Lambda Function and get the available Zones during launch
Mappings:
  Regions:
    us-east-1: {Subnet1: true, Subnet2: true, Subnet3: true, Subnet4: true, Subnet5: true, Subnet6: true}
    us-east-2: {Subnet1: true, Subnet2: true, Subnet3: false, Subnet4: false, Subnet5: false, Subnet6: false}
    # us-west-1b is not available for new AWS costumers
    us-west-1: {Subnet1: true, Subnet2: false, Subnet3: true, Subnet4: false, Subnet5: false, Subnet6: false}
    us-west-2: {Subnet1: true, Subnet2: true, Subnet3: true, Subnet4: false, Subnet5: false, Subnet6: false}
    ap-northeast-1: {Subnet1: true, Subnet2: true, Subnet3: false, Subnet4: false, Subnet5: false, Subnet6: false}
    ap-northeast-2: {Subnet1: true, Subnet2: true, Subnet3: false, Subnet4: false, Subnet5: false, Subnet6: false}
    ap-northeast-3: {Subnet1: true, Subnet2: false, Subnet3: false, Subnet4: false, Subnet5: false, Subnet6: false}
    ap-southeast-1: {Subnet1: true, Subnet2: true, Subnet3: true, Subnet4: false, Subnet5: false, Subnet6: false}
    ap-southeast-2: {Subnet1: true, Subnet2: true, Subnet3: true, Subnet4: false, Subnet5: false, Subnet6: false}
    ap-south-1: {Subnet1: true, Subnet2: true, Subnet3: false, Subnet4: false, Subnet5: false, Subnet6: false}
    eu-west-1: {Subnet1: true, Subnet2: true, Subnet3: true, Subnet4: false, Subnet5: false, Subnet6: false}
    eu-west-2: {Subnet1: true, Subnet2: true, Subnet3: true, Subnet4: false, Subnet5: false, Subnet6: false}
    eu-west-3: {Subnet1: true, Subnet2: true, Subnet3: true, Subnet4: false, Subnet5: false, Subnet6: false}
    eu-central-1: {Subnet1: true, Subnet2: true, Subnet3: true, Subnet4: false, Subnet5: false, Subnet6: false}
    sa-east-1: {Subnet1: true, Subnet2: true, Subnet3: true, Subnet4: false, Subnet5: false, Subnet6: false}
    ca-central-1: {Subnet1: true, Subnet2: true, Subnet3: false, Subnet4: false, Subnet5: false, Subnet6: false}

Conditions:
  CreateBastionHosts: !Equals [true, !Ref CreateBastionHost]
  hasTags: !Not [!Equals ['', !Ref Tags]]
  Create1stSubnet: !Equals [!FindInMap [ Regions, !Ref "AWS::Region", "Subnet1" ], true]
  Create2ndSubnet: !Equals [!FindInMap [ Regions, !Ref "AWS::Region", "Subnet2" ], true]
  Create3rdSubnet: !Equals [!FindInMap [ Regions, !Ref "AWS::Region", "Subnet3" ], true]
  Create4thSubnet: !Equals [!FindInMap [ Regions, !Ref "AWS::Region", "Subnet4" ], true]
  Create5thSubnet: !Equals [!FindInMap [ Regions, !Ref "AWS::Region", "Subnet5" ], true]
  Create6thSubnet: !Equals [!FindInMap [ Regions, !Ref "AWS::Region", "Subnet6" ], true]

Resources:
  GetResourceTags:
    Type: Custom::GetParameterAsTags
    Version: 1.0
    Properties:
      ServiceToken:
        !Join
        - ":"
        - - "arn:aws:lambda"
          - !Ref AWS::Region
          - !Ref AWS::AccountId
          - "function"
          - !Ref LambdaTagParser
      data: !Ref Tags

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]

  IPv6CidrBlock:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      VpcId: !Ref VPC
      AmazonProvidedIpv6CidrBlock: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]

  EgressOnlyInternetGateway:
    Type: AWS::EC2::EgressOnlyInternetGateway
    Properties:
      VpcId: !Ref VPC

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  DefaultPublicIpv6Route:
    Type: AWS::EC2::Route
    Properties:
      DestinationIpv6CidrBlock: ::/0
      RouteTableId: !Ref PublicRouteTable
      EgressOnlyInternetGatewayId: !Ref EgressOnlyInternetGateway

  BastionHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateBastionHosts
    Properties:
      GroupDescription: Limits bastion host ingress traffic
      SecurityGroupIngress:
        - CidrIp: !Ref BastionHostAllowedIPRange
          IpProtocol: "-1"
      VpcId: !Ref VPC
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]

  AZ1:
    Type: AWS::CloudFormation::Stack
    Condition: Create1stSubnet
    DependsOn: InternetGatewayAttachment
    Properties:
      TemplateURL: https://s3.ca-central-1.amazonaws.com/dentalwings-cloudformation-templates/aws-cloudformation-vpc-setup/cloudformation_az_creation.yml
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
      Parameters:
        VPC: !Ref VPC
        PublicCIDR: !Select [11, !Cidr [!Ref VpcCIDR, 256, 8]]
        PrivateCIDR: !Select [21, !Cidr [!Ref VpcCIDR, 256, 8]]
        PublicIpv6CIDR: !Select [11, !Cidr [!Select [0, !GetAtt 'VPC.Ipv6CidrBlocks'], 256, 64]]
        PrivateIpv6CIDR: !Select [21, !Cidr [!Select [0, !GetAtt 'VPC.Ipv6CidrBlocks'], 256, 64]]
        AZ: !Select [ 0, !GetAZs '' ]
        PublicRouteTableID: !Ref PublicRouteTable
        AssignIpv6AddressOnCreationLambdaCodeArn: !GetAtt AssignIpv6AddressOnCreationLambdaCode.Arn
        EgressOnlyInternetGateway: !Ref EgressOnlyInternetGateway

  AZ2:
    Type: AWS::CloudFormation::Stack
    Condition: Create2ndSubnet
    DependsOn: InternetGatewayAttachment
    Properties:
      TemplateURL: https://s3.ca-central-1.amazonaws.com/dentalwings-cloudformation-templates/aws-cloudformation-vpc-setup/cloudformation_az_creation.yml
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
      Parameters:
        VPC: !Ref VPC
        PublicCIDR: !Select [12, !Cidr [!Ref VpcCIDR, 256, 8]]
        PrivateCIDR: !Select [22, !Cidr [!Ref VpcCIDR, 256, 8]]
        PublicIpv6CIDR: !Select [12, !Cidr [!Select [0, !GetAtt 'VPC.Ipv6CidrBlocks'], 256, 64]]
        PrivateIpv6CIDR: !Select [22, !Cidr [!Select [0, !GetAtt 'VPC.Ipv6CidrBlocks'], 256, 64]]
        AZ: !Select [ 1, !GetAZs '' ]
        PublicRouteTableID: !Ref PublicRouteTable
        AssignIpv6AddressOnCreationLambdaCodeArn: !GetAtt AssignIpv6AddressOnCreationLambdaCode.Arn
        EgressOnlyInternetGateway: !Ref EgressOnlyInternetGateway

  AZ3:
    Type: AWS::CloudFormation::Stack
    Condition: Create3rdSubnet
    DependsOn: InternetGatewayAttachment
    Properties:
      TemplateURL: https://s3.ca-central-1.amazonaws.com/dentalwings-cloudformation-templates/aws-cloudformation-vpc-setup/cloudformation_az_creation.yml
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
      Parameters:
        VPC: !Ref VPC
        PublicCIDR: !Select [13, !Cidr [!Ref VpcCIDR, 256, 8]]
        PrivateCIDR: !Select [23, !Cidr [!Ref VpcCIDR, 256, 8]]
        PublicIpv6CIDR: !Select [13, !Cidr [!Select [0, !GetAtt 'VPC.Ipv6CidrBlocks'], 256, 64]]
        PrivateIpv6CIDR: !Select [23, !Cidr [!Select [0, !GetAtt 'VPC.Ipv6CidrBlocks'], 256, 64]]
        AZ: !Select [ 2, !GetAZs '' ]
        PublicRouteTableID: !Ref PublicRouteTable
        AssignIpv6AddressOnCreationLambdaCodeArn: !GetAtt AssignIpv6AddressOnCreationLambdaCode.Arn
        EgressOnlyInternetGateway: !Ref EgressOnlyInternetGateway

  AZ4:
    Type: AWS::CloudFormation::Stack
    Condition: Create4thSubnet
    DependsOn: InternetGatewayAttachment
    Properties:
      TemplateURL: https://s3.ca-central-1.amazonaws.com/dentalwings-cloudformation-templates/aws-cloudformation-vpc-setup/cloudformation_az_creation.yml
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
      Parameters:
        VPC: !Ref VPC
        PublicCIDR: !Select [14, !Cidr [!Ref VpcCIDR, 256, 8]]
        PrivateCIDR: !Select [24, !Cidr [!Ref VpcCIDR, 256, 8]]
        PublicIpv6CIDR: !Select [14, !Cidr [!Select [0, !GetAtt 'VPC.Ipv6CidrBlocks'], 256, 64]]
        PrivateIpv6CIDR: !Select [24, !Cidr [!Select [0, !GetAtt 'VPC.Ipv6CidrBlocks'], 256, 64]]
        AZ: !Select [ 3, !GetAZs '' ]
        PublicRouteTableID: !Ref PublicRouteTable
        AssignIpv6AddressOnCreationLambdaCodeArn: !GetAtt AssignIpv6AddressOnCreationLambdaCode.Arn
        EgressOnlyInternetGateway: !Ref EgressOnlyInternetGateway

  AZ5:
    Type: AWS::CloudFormation::Stack
    Condition: Create5thSubnet
    DependsOn: InternetGatewayAttachment
    Properties:
      TemplateURL: https://s3.ca-central-1.amazonaws.com/dentalwings-cloudformation-templates/aws-cloudformation-vpc-setup/cloudformation_az_creation.yml
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
      Parameters:
        VPC: !Ref VPC
        PublicCIDR: !Select [15, !Cidr [!Ref VpcCIDR, 256, 8]]
        PrivateCIDR: !Select [25, !Cidr [!Ref VpcCIDR, 256, 8]]
        PublicIpv6CIDR: !Select [15, !Cidr [!Select [0, !GetAtt 'VPC.Ipv6CidrBlocks'], 256, 64]]
        PrivateIpv6CIDR: !Select [25, !Cidr [!Select [0, !GetAtt 'VPC.Ipv6CidrBlocks'], 256, 64]]
        AZ: !Select [ 4, !GetAZs '' ]
        PublicRouteTableID: !Ref PublicRouteTable
        AssignIpv6AddressOnCreationLambdaCodeArn: !GetAtt AssignIpv6AddressOnCreationLambdaCode.Arn
        EgressOnlyInternetGateway: !Ref EgressOnlyInternetGateway

  AZ6:
    Type: AWS::CloudFormation::Stack
    Condition: Create6thSubnet
    DependsOn: InternetGatewayAttachment
    Properties:
      TemplateURL: https://s3.ca-central-1.amazonaws.com/dentalwings-cloudformation-templates/aws-cloudformation-vpc-setup/cloudformation_az_creation.yml
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
      Parameters:
        VPC: !Ref VPC
        PublicCIDR: !Select [16, !Cidr [!Ref VpcCIDR, 256, 8]]
        PrivateCIDR: !Select [26, !Cidr [!Ref VpcCIDR, 256, 8]]
        PublicIpv6CIDR: !Select [16, !Cidr [!Select [0, !GetAtt 'VPC.Ipv6CidrBlocks'], 256, 64]]
        PrivateIpv6CIDR: !Select [26, !Cidr [!Select [0, !GetAtt 'VPC.Ipv6CidrBlocks'], 256, 64]]
        AZ: !Select [ 5, !GetAZs '' ]
        PublicRouteTableID: !Ref PublicRouteTable
        AssignIpv6AddressOnCreationLambdaCodeArn: !GetAtt AssignIpv6AddressOnCreationLambdaCode.Arn
        EgressOnlyInternetGateway: !Ref EgressOnlyInternetGateway

  BastionHost:
    Type: AWS::CloudFormation::Stack
    Condition: CreateBastionHosts
    DependsOn: AZ1
    Properties:
      TemplateURL: https://s3.ca-central-1.amazonaws.com/dentalwings-cloudformation-templates/aws-cloudformation-vpc-setup/cloudformation_bh_creation.yml
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
      Parameters:
        InstanceType: !Ref BastionHostInstanceType
        SubnetId: !GetAtt AZ1.Outputs.PublicSubnet
        SecurityGroupId: !Ref BastionHostSecurityGroup
        KeyName: !Ref BastionHostKeyName
        SSHLocation: !Ref BastionHostAllowedIPRange

  # TagParser Helper
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
       - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
            - sts:AssumeRole

  LambdaTagParser:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.main
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Runtime: nodejs6.10
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
      Code:
        ZipFile: |
              exports.main = (event, context, callback) => {
                  let keyPairString = event.ResourceProperties.data;
                  let keyPairs = keyPairString.split(',').map( item => ({ Key: item.split('=')[0], Value: item.split('=')[1]}));

                 sendResponse(event,context,"SUCCESS", { result: keyPairs });
              };

              function sendResponse(event, context, status, data, err) {
                 var reason = err ? err.message : '';
                 var responseBody = {
                   StackId: event.StackId,
                   RequestId: event.RequestId,
                   LogicalResourceId: event.LogicalResourceId,
                   PhysicalResourceId: 'tagparser-' + JSON.stringify(event.ResourceProperties.data),
                   Status: status,
                   Data: data
                 };
                 console.log("RESPONSE:\n", JSON.stringify(responseBody));
                 var json = JSON.stringify(responseBody);

                 var https = require("https");
                 var url = require("url");

                 var parsedUrl = url.parse(event.ResponseURL);
                 var options = {
                     hostname: parsedUrl.hostname,
                     port: 443,
                     path: parsedUrl.path,
                     method: "PUT",
                     headers: {
                       "content-type": "",
                       "content-length": json.length
                     }
                   };

                 var request = https.request(options, function(response) {
                     console.log("STATUS: " + response.statusCode);
                     console.log("HEADERS: " + JSON.stringify(response.headers));
                     context.done(null, data);
                   });

                   request.on("error", function(error) {
                     console.log("sendResponse Error:\n", error);
                     context.done(error);
                   });

                   request.on("end", function() {
                     console.log("end");
                   });
                   request.write(json);
                   request.end();
              }

  ####### Helper auto-assign IPv6 on Subnet
  # https://forums.aws.amazon.com/thread.jspa?messageID=815051&tstart=0
  AssignIpv6AddressOnCreationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: AllowLogsWrite
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
      - PolicyName: AllowVPCmodify
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:ModifySubnetAttribute
            Resource: "*"
  AssignIpv6AddressOnCreationLambdaCode:
    Type: AWS::Lambda::Function
    DependsOn: AssignIpv6AddressOnCreationLambdaRole
    Properties:
      Handler: "index.lambda_handler"
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
      Code:
        ZipFile: !Sub |
            import cfnresponse
            import boto3

            def lambda_handler(event, context):
                if event['RequestType'] is 'Delete':
                  cfnresponse.send(event, context, cfnresponse.SUCCESS)

                responseValue = event['ResourceProperties']['theSubnet']
                ec2 = boto3.client('ec2', region_name='${AWS::Region}')
                ec2.modify_subnet_attribute(AssignIpv6AddressOnCreation={'Value': True}, SubnetId=responseValue)
                responseData = {}
                responseData['myReturnValue'] = responseValue
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "CustomResourcePhysicalID")
      Runtime: "python2.7"
      Role: !GetAtt AssignIpv6AddressOnCreationLambdaRole.Arn
      Timeout: 30

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCID"
  VPCCIDR:
    Description: VPC CIDR Blocks
    Value: !Ref VpcCIDR
    Export:
      Name: !Sub "${AWS::StackName}-VPCCIDR"
  VPCV6CIDR:
    Description: VPC V6 CIDR Blocks
    Value: !Select [0, !GetAtt 'VPC.Ipv6CidrBlocks']
    Export:
      Name: !Sub "${AWS::StackName}-VPCV6CIDR"
  PublicSubnets:
    Description: Comma seperated list of all created public PublicSubnets
    Value: !Join
      - ","
      -
        - !If [ Create1stSubnet, !GetAtt AZ1.Outputs.PublicSubnet , !Ref "AWS::NoValue"]
        - !If [ Create2ndSubnet, !GetAtt AZ2.Outputs.PublicSubnet , !Ref "AWS::NoValue"]
        - !If [ Create3rdSubnet, !GetAtt AZ3.Outputs.PublicSubnet , !Ref "AWS::NoValue"]
        - !If [ Create4thSubnet, !GetAtt AZ4.Outputs.PublicSubnet , !Ref "AWS::NoValue"]
        - !If [ Create5thSubnet, !GetAtt AZ5.Outputs.PublicSubnet , !Ref "AWS::NoValue"]
        - !If [ Create6thSubnet, !GetAtt AZ6.Outputs.PublicSubnet , !Ref "AWS::NoValue"]
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnets"
  PrivateSubnets:
    Description: Comma seperated list of all created public PrivateSubnets
    Value: !Join
      - ","
      -
        - !If [ Create1stSubnet, !GetAtt AZ1.Outputs.PrivateSubnet , !Ref "AWS::NoValue"]
        - !If [ Create2ndSubnet, !GetAtt AZ2.Outputs.PrivateSubnet , !Ref "AWS::NoValue"]
        - !If [ Create3rdSubnet, !GetAtt AZ3.Outputs.PrivateSubnet , !Ref "AWS::NoValue"]
        - !If [ Create4thSubnet, !GetAtt AZ4.Outputs.PrivateSubnet , !Ref "AWS::NoValue"]
        - !If [ Create5thSubnet, !GetAtt AZ5.Outputs.PrivateSubnet , !Ref "AWS::NoValue"]
        - !If [ Create6thSubnet, !GetAtt AZ6.Outputs.PrivateSubnet , !Ref "AWS::NoValue"]
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnets"
  AZ1PrivateSubnet:
    Description: AZ1 Private Subnet
    Condition: Create1stSubnet
    Value: !GetAtt AZ1.Outputs.PrivateSubnet
    Export:
      Name: !Sub "${AWS::StackName}-AZ1-PrivateSubnet"
  AZ1PublicSubnet:
    Description: AZ1 Public Subnet
    Condition: Create1stSubnet
    Value: !GetAtt AZ1.Outputs.PublicSubnet
    Export:
      Name: !Sub "${AWS::StackName}-AZ1-PublicSubnet"
  AZ3PrivateSubnet:
    Description: AZ3 Private Subnet
    Condition: Create3rdSubnet
    Value: !GetAtt AZ3.Outputs.PrivateSubnet
    Export:
      Name: !Sub "${AWS::StackName}-AZ3-PrivateSubnet"
  AZ3PublicSubnet:
    Description: AZ3 Public Subnet
    Condition: Create3rdSubnet
    Value: !GetAtt AZ3.Outputs.PublicSubnet
    Export:
      Name: !Sub "${AWS::StackName}-AZ3-PublicSubnet"
  AZ4PrivateSubnet:
    Description: AZ4 Private Subnet
    Condition: Create4thSubnet
    Value: !GetAtt AZ4.Outputs.PrivateSubnet
    Export:
      Name: !Sub "${AWS::StackName}-AZ4-PrivateSubnet"
  AZ4PublicSubnet:
    Description: AZ4 Public Subnet
    Condition: Create4thSubnet
    Value: !GetAtt AZ4.Outputs.PublicSubnet
    Export:
      Name: !Sub "${AWS::StackName}-AZ4-PublicSubnet"
  AZ5PrivateSubnet:
    Description: AZ5 Private Subnet
    Condition: Create5thSubnet
    Value: !GetAtt AZ5.Outputs.PrivateSubnet
    Export:
      Name: !Sub "${AWS::StackName}-AZ5-PrivateSubnet"
  AZ5PublicSubnet:
    Description: AZ5 Public Subnet
    Condition: Create5thSubnet
    Value: !GetAtt AZ5.Outputs.PublicSubnet
    Export:
      Name: !Sub "${AWS::StackName}-AZ5-PublicSubnet"
  AZ6PrivateSubnet:
    Description: AZ6 Private Subnet
    Condition: Create6thSubnet
    Value: !GetAtt AZ6.Outputs.PrivateSubnet
    Export:
      Name: !Sub "${AWS::StackName}-AZ6-PrivateSubnet"
  AZ6PublicSubnet:
    Description: AZ6 Public Subnet
    Condition: Create6thSubnet
    Value: !GetAtt AZ6.Outputs.PublicSubnet
    Export:
      Name: !Sub "${AWS::StackName}-AZ6-PublicSubnet"
  BastionHostIp:
    Description: IP Address of Bastion host
    Condition: CreateBastionHosts
    Value: !GetAtt BastionHost.Outputs.PublicIP
